#!/bin/bash
#
# AM-Q Installation
#
# Global variables
#
#       debug_off=true|false
#
#       dry_run=true|false
#
#

########################################################################################################################
#
# CONFIGURATION
#

# ex: 1g or 515m

java_min_mem=756m
#java_min_mem=6g

java_max_mem=756m
#java_max_mem=6g

memory_usage_limit="900 mb"
#memory_usage_limit="5 gb"

temp_usage_limit="900 mb"
#temp_usage_limit="3 gb"

log_maxFileSize=100MB
burn_in_dir=/tmp/.burn-in

general_purpose_connector_port=61616
network_bridge_port=60000

brokers="b01 b02"

#
#
#
########################################################################################################################

function install-amq
{
    id=$1
    amq_archive_file=$2

    debug "installing AMQ ..."

    [ "${id}" = "" ] && { echo "'id' not specified" 1>&2; exit 1; }
    [ "${amq_archive_file}" = "" ] && { echo "'amq_archive_file' not specified" 1>&2; exit 1; }

    local amq_link=/opt/a-mq

    [ -h ${amq_link} ] && { echo "AMQ already installed as ${amq_link}";  return 0; } 

    local archive_dir=/nfs/archive
    [ -d ${archive_dir} ] || { echo "${archive_dir} not a directory, was the NFS client activated?" 1>&2; exit 1; }

    local amq_archive_path=${archive_dir}/${amq_archive_file}
    [ -f ${amq_archive_path} ] || { echo "A-MQ archive ${amq_archive_path} does not exist" 1>&2; exit 1; }

    debug "extracting ${amq_archive_path} into /opt ..."
    (cd /opt; unzip -q ${amq_archive_path}) && echo "extracted A-MQ into /opt" || { echo "failed to extract A-MQ" 1>&2; exit 1; }

    amq_dir=$(get_amq_dir /opt)

    (cd /opt; ln -s ${amq_dir} a-mq) && echo "linked ${amq_dir} to /opt/a-mq"

    # update root's and ec2-user's .bashrc

    local users="ec2-user root"
    for user in ${users}; do
        local bashrc_file=$(get-home-dir ${user})/.bashrc
        if ! grep -q "export AMQ_HOME=/opt/a-mq" ${bashrc_file}; then
        echo "" >> ${bashrc_file}
        echo "export AMQ_HOME=/opt/a-mq" >> ${bashrc_file}
        echo "alias amq='cd \${AMQ_HOME}'" >> ${bashrc_file}
        echo "alias amqb='cd \${AMQ_HOME}/bin'" >> ${bashrc_file}
        echo "alias amql='cd \${AMQ_HOME}/data/log'" >> ${bashrc_file}
        echo "alias amqc='cd \${AMQ_HOME}/etc'" >> ${bashrc_file}
        echo "alias amq-start='\${AMQ_HOME}/bin/start'" >> ${bashrc_file}
        echo "alias amq-stop='\${AMQ_HOME}/bin/stop'" >> ${bashrc_file}
        echo "updated ${bashrc_file} with A-MQ configuration"
    fi
    done

    debug "setting up AMQ security ..."

    local f

    f=/opt/a-mq/etc/users.properties

    if grep -q "^#admin=admin,admin$" ${f}; then
        cat ${f} | sed -e 's/^#admin=admin,admin$/admin=admin123,admin/' > ./.tmp.txt || { echo "" 1>&2; exit 1; }
        mv ./.tmp.txt ${f}
        chgrp ec2-user ${f}
        chmod g+w ${f}
        echo "updated A-MQ security credentials in ${f}"
    fi

    f=/opt/a-mq/etc/system.properties

    if grep -q "^#activemq.jmx.user=admin$" ${f}; then
        cat ${f} | sed \
            -e 's/^#activemq.jmx.user=admin$/activemq.jmx.user=admin/' \
            -e 's/^#activemq.jmx.password=.*$/activemq.jmx.password=admin123/' > ./.tmp.txt || { echo "" 1>&2; exit 1; }
        mv ./.tmp.txt ${f}
        chgrp ec2-user ${f}
        chmod g+w ${f}
        echo "updated A-MQ security credentials in ${f}"
    fi

    debug "setting broker name to ${id} ..."

    f=/opt/a-mq/etc/org.fusesource.mq.fabric.server-default.cfg

    if grep -q "^broker-name=amq$" ${f}; then
        cat ${f} | sed -e 's/^broker-name=amq$/broker-name='${id}'/' > ./.tmp.txt || { echo "" 1>&2; exit 1; }
        mv ./.tmp.txt ${f}
        chgrp ec2-user ${f}
        chmod g+w ${f}
        echo "updated broker-name to ${id} in ${f}"
    fi

    debug "configuring broker memory ..."

    [ "${java_min_mem}" = "" ] && { echo "'java_min_mem' not defined" 1>&2; exit 1; }
    [ "${java_max_mem}" = "" ] && { echo "'java_max_mem' not defined" 1>&2; exit 1; }

    local f=/opt/a-mq/bin/setenv

    cat ${f} | sed \
        -e 's/^\( *JAVA_MIN_MEM=\).*$/\1'${java_min_mem}'/' \
        -e 's/^\( *JAVA_MAX_MEM=\).*$/\1'${java_max_mem}'/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
    mv ${burn_in_dir}/sed.tmp ${f} && \
        echo "set min memory to ${java_min_mem} and max memory to ${java_max_mem} in ${f}" || \
        { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }

    debug "removing per-queue producer flow control memory limit ..."

    f=/opt/a-mq/etc/activemq.xml

    cat ${f} | sed \
        -e 's/\(^.*\) memoryLimit.*$/\1>/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
    mv ${burn_in_dir}/sed.tmp ${f} && \
        echo "removed memory limit on queues in ${f}" || \
        { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }

    debug "adjust system-level memory limits ..."

    [ "${memory_usage_limit}" = "" ] && { echo "'memory_usage_limit' not defined" 1>&2; exit 1; }
    [ "${temp_usage_limit}" = "" ] && { echo "'temp_usage_limit' not defined" 1>&2; exit 1; }

    f=/opt/a-mq/etc/activemq.xml

    cat ${f} | sed \
        -e 's/\(^.*memoryUsage limit=\).*$/\1\"'"${memory_usage_limit}"'\"\/>/' \
        -e 's/\(^.*tempUsage limit=\).*$/\1\"'"${temp_usage_limit}"'\"\/>/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
    mv ${burn_in_dir}/sed.tmp ${f} && \
        echo "updated memoryUsage to ${memory_usage_limit} and tempUsage to ${temp_usage_limit} in ${f}" || \
        { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }

    configureTransportConnectors /opt/a-mq/etc/activemq.xml ${burn_in_dir} ${id} ${general_purpose_connector_port} ${network_bridge_port} "${brokers}"
    configureNetworkConnectors /opt/a-mq/etc/activemq.xml ${burn_in_dir} ${id} ${network_bridge_port} "${brokers}" admin admin123

    local clustered=false
    f=/opt/a-mq/etc/activemq.xml

    if ${clustered}; then

    	debug "configuring clustered persistence ..."
        local cluster
        if [ "${id}"="b01" -o "${id}"="b04" ]; then
            cluster="cluster01"
        elif [ "${id}"="b02" -o "${id}"="b05" ]; then
            cluster="cluster02"
        elif [ "${id}"="b03" -o "${id}"="b06" ]; then
            cluster="cluster03"
        else
	    echo "unknown id ${id}" 1>&2;
            exit 1;
        fi

        cat ${f} | sed \
            -e 's/^.*kahaDB.*$/            <kahaDB directory="\/nfs\/'${cluster}'\/kahadb" lockKeepAlivePeriod="5000"\/>/' > ${burn_in_dir}/sed.tmp || \
                { echo "failed to sed ${f}" 1>2; exit 1; }

        mv ${burn_in_dir}/sed.tmp ${f} && \
            echo "updated persistence in ${f}" || \
            { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }

    else

        debug "configuring non-clustered persistence ..."

        #
        # this is a noop, default configuration based on ${data} is good enough
        #

    fi

    debug "adjusting logging ..."

    [ "${log_maxFileSize}" = "" ] && { echo "'log_maxFileSize' not defined" 1>&2; exit 1; }

    f=/opt/a-mq/etc/org.ops4j.pax.logging.cfg

    cat ${f} | sed \
        -e 's/^log4j\.appender\.out\.maxFileSize=.*$/log4j.appender.out.maxFileSize='${log_maxFileSize}'/' \
        -e 's/^\(log4j.appender.out.maxBackupIndex=.*\)$/#\1/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
    mv ${burn_in_dir}/sed.tmp ${f} && \
        echo "updated logging in ${f}" || \
        { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }

    debug "updating permissions ..."

    chgrp ec2-user /opt/a-mq/ && echo "chgrp ec2-user /opt/a-mq/"
    chmod g+w /opt/a-mq/ && echo "chmod g+w /opt/a-mq/"
    chgrp -R ec2-user /opt/a-mq/data && echo "chgrp -R ec2-user /opt/a-mq/data"
    chmod -R g+w /opt/a-mq/data && echo "chmod -R g+w /opt/a-mq/data"
    chgrp -R ec2-user /opt/a-mq/etc && echo "chgrp -R ec2-user /opt/a-mq/etc"
    chmod -R g+w /opt/a-mq/etc && echo "chmod -R g+w /opt/a-mq/etc"
}

# return the absolute path of the sole A-MQ directory, or empty string if no A-MQ directory
# is found, or fail if more than one A-MQ directory is found
function get_amq_dir
{
    local parent=$1

    [ "${parent}" = "" ] && { echo "'parent' directory not specified" 1>&2; exit 1; }
    [ -d ${parent} ] || { echo "'parent' ${parent} is not a directory" 1>&2; exit 1; }

    local amq_dir

    for i in $(ls -d ${parent}/*); do
        if [ -d ${i} ]; then
            local name
            name=$(basename ${i})
            name=${name:0:10}
            if [ "${name}" = "jboss-a-mq" ]; then
                [ "${amq_dir}" != "" ] && { echo "more than one A-MQ directory exist in ${parent}: ${amq_dir}, ${i}" 1>&2; exit 1; }
                amq_dir=${i}
            fi
        fi
    done

    echo ${amq_dir}
}

function configureTransportConnectors()
{
    debug "configuring transportConnectors ..."

    local f=$1
    local tmp_dir=$2
    local name=$3
    local general_purpose_port=$4
    local network_bridge_port=$5
    local brokers=$6 # space separated list of brokers

    [ "${f}" = "" ] && fail "activemq.xml configuration file not specified"
    [ -f ${f} ] || fail "configuration file ${f} does not exist"
    [ "${tmp_dir}" = "" ] && fail "temporary directory not specified"
    [ -d ${tmp_dir} ] || fail "temporary directory ${tmp_dir} not a directory"
    [ "${name}" = "" ] && fail "'name' not specified"
    [ "${general_purpose_port}" = "" ] && fail "'general_purpose_port' not specified"
    [ "${network_bridge_port}" = "" ] && fail "'network_bridge_port' not specified"
    [ "${brokers}" = "" ] && fail "'brokers' not specified"

    debug "configuring the general purpose transport connector ..."

    cat ${f} | sed -e 's/^\(.*transportConnector.*uri=\"tcp:\/\/\).*\(\?maximumConnections.*$\)/\1'"${name}":"${general_purpose_port}"'\2/' > ${tmp_dir}/sed.tmp || fail "failed to sed ${f}"
    mv ${tmp_dir}/sed.tmp ${f} && info "updated the general purpose transportConnector to ${name}:${general_purpose_port} in ${f}" || fail "failed to restore ${f} from ${tmp_dir}/sed.tmp"

    # create a connector for each peer broker
    for b in ${brokers}; do
        [ "${b}" = "${name}" ] && continue;
        # we call them "<name>-inflow" so we first make sure the transport is not already there
        local transport_name="${b}-inflow"
        if grep -q "transportConnector name=\"${transport_name}\"" ${f}; then
            debug "transport connector '${transport_name}' already exists"
        else
            debug "creating the '${transport_name}' transport connector for ${b}"
            local n
            n=$(cat ${f} | grep -n "transportConnector name=" | tail -1) || failed "failed to determine the line number"
            n=${n%%:*}
            cat ${f} | sed -e ${n}'a\
 \ \ \ \ \ \ \ \ \ \ \ \ <transportConnector name="'"${transport_name}"'" uri="tcp://'"${name}"':'"${network_bridge_port}"'"/>' > ${tmp_dir}/sed.tmp
            mv ${tmp_dir}/sed.tmp ${f} && info "added '${transport_name}' transportConnector in ${f}" || fail "failed to restore ${f} from ${tmp_dir}/sed.tmp"
        fi

    done
}

function configureNetworkConnectors()
{
    debug "configuring networkConnectors ..."

    local f=$1
    local tmp_dir=$2
    local name=$3
    local bridge_port=$4
    local brokers=$5 # space separated list of brokers
    local username=$6
    local password=$7

    [ "${f}" = "" ] && fail "activemq.xml configuration file not specified"
    [ -f ${f} ] || fail "configuration file ${f} does not exist"
    [ "${tmp_dir}" = "" ] && fail "temporary directory not specified"
    [ -d ${tmp_dir} ] || fail "temporary directory ${tmp_dir} not a directory"
    [ "${name}" = "" ] && fail "'name' not specified"
    [ "${brokers}" = "" ] && fail "'brokers' not specified"
    [ "${bridge_port}" = "" ] && fail "'bridge_port' not specified"
    [ "${username}" = "" ] && fail "'username' not specified"
    [ "${password}" = "" ] && fail "'password' not specified"

    if grep -q "<networkConnectors" ${f}; then
        debug "network connectors already configured"
    else
        local n
        n=$(cat ${f} | grep -n "</transportConnectors>" | tail -1) || failed "failed to determine the line number"
        n=${n%%:*}

        local target;

        for b in ${brokers}; do
            [ "${b}" = "${name}" ] && continue;
            target=${b}
        done

        # it only works with two brokers (TODO)
        cat ${f} | sed -e ${n}'a\
 \
 \ \ \ \ \ \ \ \ <networkConnectors>\
 \ \ \ \ \ \ \ \ \ \ \ \ <networkConnector name="unidirectional-bridge-to-'"${target}"'" uri="static:(tcp://'"${target}"':'"${bridge_port}"')"\
 \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ networkTTL="3" duplex="false" userName="'"${username}"'" password="'"${password}"'">\
 \ \ \ \ \ \ \ \ \ \ \ \ </networkConnector>\
 \ \ \ \ \ \ \ \ </networkConnectors>\
 \' > ${tmp_dir}/sed.tmp
        mv ${tmp_dir}/sed.tmp ${f} && info "added networkConnectors in ${f}" || fail "failed to restore ${f} from ${tmp_dir}/sed.tmp"

    fi
}


