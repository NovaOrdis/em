#!/bin/bash

lib=$(dirname $0)/../lib/std.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/../lib/linux.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/../lib/ec2.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/lib/$(basename $0).shlib; [ -f ${lib} ] && . ${lib}

help=false
args=""

function usage()
{
cat <<EOF

Update an existing instance. The instance must be in "running" state for this step to succeed.

Currently we can only update an instance at a time. TODO: multiple parallel updates.

Available Overlays:

$(list-overlays)

Usage:

    em overlay <overlay-name> <instance-name>

EOF
exit 0
}

function main()
{
    debug "$(basename $0) command line arguments: $@"

    process-common-arguments $@

    ${help} && usage;

    local name
    local overlay

    for i in ${args}; do
        if [ "${overlay}" = "" ]; then
            overlay=${i}
        elif [ "${i:0:2}" = "--" ]; then
            fail "unknown update option ${i}";
        else
            [ "${name}" = "" ] && name=${i} || name="${name} ${i}"
        fi
    done

    debug "overlay: ${overlay}"
    debug "name: ${name}"

    [ "${name/ //}" != "${name}" ] && fail "currently we can only update an instance at a time"
    [ "${name}" = "" ] && fail "an instance name must be specified"

    [ -f $(dirname $0)/../overlays/${overlay} ] || fail "overlay $(dirname $0)/../overlays/${overlay} does not exist"

    info "applying overlay ${overlay} to ${name} ..."

    #
    # figure out the ssh url, catch address-related issues early to avoid creating the tar unnecessarily
    #

    local ssh_url
    ssh_url=$(ssh-url ${name}) || exit 1
    debug "ssh_url: ${ssh_url}"

    #
    # tar gz the em bits that are needed remote; we don't use zip because zip/unzip might not be installed yet
    #

    local gzip_quiet="-q"
    local tar_verbose=""
    ${verbose} && { gzip_quiet=""; tar_verbose="v"; }

    local tar_file=$(unique-file).tar
    local gzip_file=${tar_file}.gz
    local tar_root=$(dirname $0)/../..

    debug "tar_file: ${tar_file}"
    debug "gzip_file: ${gzip_file}"
    debug "tar_root: ${tar_root}"

    # make sure ${tar_root}/lib exists - if it doesn't we might be in a situation when we're running from a
    # development directory and we want to get rid of that in the long run

    [ -d ${tar_root}/lib ] || fail "${tar_root}/lib not found - you need probably running from a non-standard location"

    (cd ${tar_root}; tar cf${tar_verbose} - bin/overlays bin/lib etc lib > ${tar_file}) || fail "failed to create ${tar_file}"

    gzip ${tar_file}

    [ -f ${gzip_file} ] && debug  "gzip file ${gzip_file} created, size $(ls -l ${gzip_file} | awk '{print $5}') bytes" || fail "failure to create ${gzip_file}"

    #
    # scp em.zip and install it on the target instance
    #

    # when scping and sshing, we use the "installation" identity
    local sqp_quiet="-q"
    ${verbose} && scp_quiet=""
    local scp_command="scp ${sqp_quiet} -i $(get-installation-identity-file) ${gzip_file} ${ssh_url}:/tmp"
    debug "scp command: ${scp_command}"

    debug "staging tools on ${name} (${ssh_url}) ..."
    ${scp_command} || fail "failed to scp to ${ssh_url}"

    #
    # execute the overlay on the target instance
    #

    nfs_server_ip=172.31.25.44

    [ -n "${EC2_URL}" ] && ec2_url_arg="--ec2-url ${EC2_URL}" || debug "EC2_URL not found in environment. This means overlay ec2-api-tools will not work correctly on remote instances."
    [ -n "${AWS_SECRET_KEY}" ] && aws_secret_key_arg="--aws-secret-key ${AWS_SECRET_KEY}" || debug "AWS_SECRET_KEY not found in environment. This means overlay ec2-api-tools will not work on remote instances."
    [ -n "${AWS_ACCESS_KEY}" ] && aws_access_key_arg="--aws-access-key ${AWS_ACCESS_KEY}" || debug "AWS_ACCESS_KEY not found in environment. This means overlay ec2-api-tools will not work on remote instances."

    local remote_command="cd /tmp; [ ! -d ./em ] && mkdir em; cd em; tar xfz${tar_verbose} ../$(basename ${gzip_file}); cd ..; rm ${gzip_file}; export EM_HOME=/tmp/em; ./em/bin/overlays/${overlay} $(serialize-common-arguments) --instance-name ${name} ${aws_access_key_arg} ${aws_secret_key_arg} ${ec2_url_arg} --nfs-server-ip ${nfs_server_ip}"
    local ssh_sudo_wrapper="ssh -i $(get-installation-identity-file) -t ${ssh_url} sudo -n bash -c \"${remote_command}\""

    # mask --aws-secret-key, if present
    debug "ssh_sudo_wrapper: ${ssh_sudo_wrapper/${aws_secret_key_arg}/--aws-secret-key ***}"

    ${ssh_sudo_wrapper} || fail "remote ${name} (${ssh_url}) command failed"

    rm ${gzip_file} && debug "${gzip_file} removed"
}

main $@


