#!/bin/bash

#
# Functions used in interaction with ec2
#

#
# returns 0 if the given argument is an instance ID or 1 otherwise
#
function is-instance-id()
{
    echo $1 | grep -iq "^i-[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]$"
}

#
# gets a mixture of names and IDs as postional parameters and converts them to IDs, also performing
# some consistency checking
#
function to-ids()
{
    [ "$1" = "" ] && fail "no instance names or ids specified"

    local ids
    local names
    while [ "$1" != "" ]; do
        if is-instance-id ${1}; then
            [ "${ids}" = "" ] && ids="$1" || ids="${ids} $1"
        else
            [ "${names}" = "" ] && names="$1" || names="${names}|$1"
        fi
        shift;
    done

    debug "ids:   ${ids}"
    debug "names: ${names}"

    local remotely_resolved_ids

    if [ "${names}" != "" ]; then
        remotely_resolved_ids=$(ec2-describe-instances | \
            jw ec2.grep_instances name="${names}" --list id) || { exit 1; }
    fi

    debug "remotely_resolved_ids: ${remotely_resolved_ids}"

    ids="${ids} ${remotely_resolved_ids}"

    ids=${ids%%[[:space:]]}
    ids=${ids##[[:space:]]}

    debug "ids: ${ids}"

    [ "${ids}" = "" ] && fail "no valid instances specified, either by id or name"

    echo ${ids}
}

#
# return 0 if we're located inside EC2, 1 otherwise
#
function in-ec2()
{
    return 1
}

function get-installation-identity-file()
{
    local file="$(dirname $0)/../../../resources/installation_access.pem"
    [ -f ${file} ] || fail "installation identity file ${file} not found"
    echo ${file}
}

#
# Return the ssh url (user@ip) for the given instance name. The function is aware of the context and it will
# return the most appropriate IP address: the public IP address (if available) if the function is executed outside
# the environment or the private IP address if the function is executed inside the environment.
#
function ssh-url()
{
    local name_or_ip=$1

    debug-arguments $@

    [ "${name_or_ip}" = "" ] && fail "'name_or_ip' not specified"

    local ip

    if echo "${name_or_ip}" | grep -q "^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]$"; then
        # we're an IP
        ip=${name_or_ip}
    elif in-ec2; then
        # get the internal IP address from /etc/hosts
        fail "NOT YET IMPLEMENTED"
    else
        # get the public IP address from /etc/hosts
        ip=$(resolve-ip ${name}) || { exit 1; }

        [ "${ip}" = "" ] && fail "cannot find '${name}' in /etc/hosts"
    fi

    local user=ec2-user

    echo ${user}@${ip}
}

########################################################################################################################
# Access Keys Management
########################################################################################################################

#
# Use this to check the precondition and issue an error message that will help with debugging. Only call it before
# functions that need access keys
#
function insure-access-keys-are-correctly-set-up-or-fail()
{
    [ -z "${AWS_ACCESS_KEY}" ] && fail "AWS_ACCESS_KEY not set up in the overlay's environment. This probably means AWS_ACCESS_KEY was not set up in the calling remote client's environment. Re-run with --verbose to troubleshoot"
    [ -z "${AWS_SECRET_KEY}" ] && fail "AWS_SECRET_KEY not set up in the overlay's environment. This probably means AWS_SECRET_KEY was not set up in the calling remote client's environment. Re-run with --verbose to troubleshoot"
    [ -z "${EC2_URL}" ] && fail "EC2_URL not set up in the overlay's environment. This probably means EC2_URL was not set up in the calling remote client's environment. Re-run with --verbose to troubleshoot"
}

########################################################################################################################
# END of Access Keys Management
########################################################################################################################

# runs ec2-describe-instances and gets the private IP address associated with the name. This is an expensive operation
# as it requires at least two JVM instances to be started and WAN access. Normally you should only use it once when
# setting the name/ip pairs in /etc/hosts.
#
# TODO: because is expensive, refactor it to accept multiple arguments and do the ec2-api-tool call and Java call only once
#
# may return empty string if the name cannot be resolved
function get-private-ip()
{
    debug-arguments $@
    local name=$1
    [ -z "${name}" ] && fail "${FUNCNAME[0]}: 'name' not provided"

    insure-access-keys-are-correctly-set-up-or-fail
    local output
    output=$(ec2-describe-instances | jw ec2.grep_instances name=${name} --list private-ip) || fail "failed to ec2-describe-instances/parse"
    debug "output: ${output}"

    # --list outputs "N/A" for values it can't find, so we replace that with empty string
    output=${output/N\/A/}
    echo ${output}
}