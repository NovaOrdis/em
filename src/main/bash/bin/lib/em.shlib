#!/bin/bash

function list-em-commands()
{
    local command_dir=$(dirname $0)/commands
    [ -d ${command_dir} ] || fail "command directory ${command_dir} not found"

    commands=$(ls ${command_dir})
    excludes="lib lifecycle"
    for i in ${commands}; do
        [[ "${excludes}" =~ ${i} ]] && continue;

        echo "    ${i}"
    done
}

function read-bootstrap-configuration()
{
    debug-arguments $@

    local bootstrap_conf_file=$(dirname $0)/../etc/bootstrap.conf
    [ -f ${bootstrap_conf_file} ] && . ${bootstrap_conf_file} || warn "bootstrap configuration file ${bootstrap_conf_file} not found"
}

########################################################################################################################
# local (user-specific) configuration tools
########################################################################################################################

#
# function reads user-specific configuration. A side effect is creating the user-specific em directory (~/.ec) and
# the internal directory structure
#
function read-user-configuration()
{
    debug-arguments $@

    local dir

    if [ ! -d ${HOME}/.em ]; then
        debug "creating the user .em directory and associated structures"
        dir=${HOME}/.em; mkdir ${dir} && debug "created ${dir}" || fail "failed to create ${dir}"
        dir=${HOME}/.em/bin; mkdir ${dir} && debug "created ${dir}" || fail "failed to create ${dir}"
    elif [ ! -d ${HOME}/.em/bin ]; then
        # this is in case the bin directory was deleted by mistake
        dir=${HOME}/.em/bin; mkdir ${dir} && debug "created ${dir}" || fail "failed to create ${dir}"
    fi

    # TODO - read configuration
}

#
# returns the NFS server internal IP as stored in the local configuration, or an empty string if the configuration
# file does not exist or it was not updated (environment's NFS server has not been built with the nfs-server overlay
# yet.
#
function get-nfs-server-ip-from-local-config()
{
    debug-arguments $@
    local local_config_file=$1

    [ -z "${local_config_file}" ] && local_config_file=${HOME}/.em/em.conf

    if [ ! -f ${local_config_file} ]; then
        debug "local configuration file ${local_config_file} not found"
        echo ""
        return 0;
    fi

    debug "local configuration file: ${local_config_file}"

    (. ${local_config_file}; echo ${nfs_server_internal_ip})
}

#
# It creates the local config file (${HOME}/.em/em.conf) if it does not exist.
#
function update-nfs-server-ip-in-local-config()
{
    debug-arguments $@

    local nfs_server_internal_ip=$1
    local local_config_file=$2

    [ -z "${nfs_server_internal_ip}" ] && fail "${FUNCNAME[0]}: 'nfs_server_internal_ip' not specified"
    [ -z "${local_config_file}" ] && local_config_file=${HOME}/.em/em.conf

    if [ ! -f ${local_config_file} ]; then
        touch ${local_config_file} && debug "local configuration file ${local_config_file} not found, we had to create it" || \
            fail "failed to create local configuration file ${local_config_file}"
    fi

    if grep -q "^nfs_server_internal_ip=" ${local_config_file}; then

        if grep -q "^nfs_server_internal_ip=${nfs_server_internal_ip}" ${local_config_file}; then
            debug "nfs_server_internal_ip already set in ${local_config_file}"
            return 1
        fi

        # declaration for a different value exists, update it
        if replace-regex "^nfs_server_internal_ip=.*$" "nfs_server_internal_ip=${nfs_server_internal_ip}" ${local_config_file}; then
            debug "updated nfs_server_internal_ip definition in ${local_config_file}"
        else
            fail "failed to update nfs_server_internal_ip in ${local_config_file}"
        fi
    else
        # declaration does not exist, append it
        echo "" >> ${local_config_file}
        echo "nfs_server_internal_ip=${nfs_server_internal_ip}" >> ${local_config_file} && \
            debug "added nfs_server_internal_ip=${nfs_server_internal_ip} to ${local_config_file}" || \
            fail "failed to add nfs_server_internal_ip=${nfs_server_internal_ip} to ${local_config_file}"
    fi
}

########################################################################################################################
# environment configuration tools
########################################################################################################################

environment_configuration_file_sourced=false

#
# we access environment configuration through a function because we want to be isolate the client code from
# changes in access to it
#
# Always returns a non-zero-length string containing the environment configuration value at stdout. If the variable
# is not defined or defined as an enpty string, the function fails with a human readable error message. The function
# also fails on any error while trying to resolve the variable. TODO: refactor if empty variable values are legal
#
# The method performs all necessary debug logging.
#
# Recommended usage pattern
#
# local myvar
# myvar=$(get-environment-configuration "myvar") || exit 1
# # guaranteed non-zero-lenght value
#
function get-environment-configuration()
{
    debug-arguments $@

    local env_config_var_name=$1
    [ -z ${env_config_var_name} ] && fail "the environment configuration variable name not provided"

    if ! ${environment_configuration_file_sourced}; then
        #
        # if ENVIRONMENT_CONFIGURATION_FILE is defined and accessible, source it to have access to the enviornment
        # configuratiom. This only can happen if NFS is operational
        #
        [ -z ${ENVIRONMENT_CONFIGURATION_FILE} ] && fail "environment configuration file not defined, check your bootstrap configuration"
        [ -f ${ENVIRONMENT_CONFIGURATION_FILE} ] || fail "environment configuration file ${ENVIRONMENT_CONFIGURATION_FILE} not accessible"
        . ${ENVIRONMENT_CONFIGURATION_FILE} && { debug "sourced ${ENVIRONMENT_CONFIGURATION_FILE}"; } || fail "failed to source ${ENVIRONMENT_CONFIGURATION_FILE}"

        environment_configuration_file_sourced=true
    fi

    local value=${!env_config_var_name}
    debug "environment variable ${env_config_var_name} resolved to \"${value}\""
    [ -z ${value} ] && fail "'${env_config_var_name}' environemnt configuration variable not defined in ${ENVIRONMENT_CONFIGURATION_FILE}"
    echo "${value}"
}

#
# The recommended way to execute commands remotely between environment hosts. The function is a wrapper around an ssh
# invocation that uses the environment provisioning private key as identity file. The authentication is guaranteed to
# succeed during the environment setup phase, because all environment hosts have been configured to list the public
# key corresponding to the provisioning private key amongst their authorized keys. The identity of the ssh connection
# on the remote host is "ec2-user".
#
# User identity on the remote host: even if the identity of the ssh connection is always "ec2-user", the caller may
# request any user identity to be used when executing the remote command(s). The user identity is enforced by the
# first argument: if "-", the command will be simply executed remotely, implicitly using the ssh connection identity.
# If anything else than "-", execute-remotely() will internally use sudo to switch to the requested identity.
#
# The usage pattern:
#
# remote_output=$(execute-remotely <"-"|${username}> ${target_ip} ${remote_command}) || exit 1
#
# DO NOT sudo as part of the remote_command, execute-remotely() will do as appropriate.
#
# Remote Command:
#
# o variables are substituted locally, before the command is sent over SSH. If you want to delay variable
#   substitution until the command reaches the remote host, user \${...}
#
# o may use ";" to specify multiple serial commands.
#   Example: remote_command="export JAVA_HOME=/opt/java; /opt/jboss/bin/add-user.sh"
#
#
function execute-remotely() {

    debug-arguments $@

    local remote_username=$1
    [ -z "${remote_username}" ] && fail "${FUNCNAME[0]}: 'remote_username' not provided"
    shift

    local target_ip=$1
    [ -z "${target_ip}" ] && fail "${FUNCNAME[0]}: 'target_ip' not provided"
    shift

    local remote_command="$@"
    debug "remote_username: ${remote_username}"
    debug "target_ip: ${target_ip}"
    debug "remote_command: ${remote_command}"

    local identity_file=$(dirname $0)/../../etc/em-provisioning-private-key.pem
    [ -f ${identity_file} ] || fail "environment provisioning private key file ${identity_file} not found or not readable"
    local ssh_connection_user=ec2-user
    local ssh_client_options="-t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${identity_file}"

    [ "${remote_username}" = "-" ] && remote_username=${ssh_connection_user}

    #
    # depending on the identity, we may want to sudo
    #
    if [ "${remote_username}" != "${ssh_connection_user}" ]; then

        if [ "${remote_username}" = "root" ]; then
            remote_command="sudo -n /bin/bash -c \"${remote_command}\""
        else
            remote_command="sudo -n -u ${remote_username} /bin/bash -c \"${remote_command}\""
        fi
    fi

    debug "executing remotely: ssh ${ssh_client_options} ${ssh_connection_user}@${target_ip} ${remote_command}"

    local remote_output

    if remote_output=$(ssh ${ssh_client_options} ${ssh_connection_user}@${target_ip} ${remote_command}); then
        #
        # successful execution
        #
        debug "remote execution on ${target_ip} successful; output will be send to stdout"
        echo "${remote_output}"
    else
        #
        # failed execution
        #
        fail "${remote_output}"
    fi
}