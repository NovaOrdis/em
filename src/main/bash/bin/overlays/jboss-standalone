#!/bin/bash

lib=$(dirname $0)/../lib/std.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/../lib/em.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/../lib/ec2.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/../lib/linux.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/lib/overlays.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/lib/jboss.shlib; [ -f ${lib} ] && . ${lib} || { echo "${lib} not found" 1>&2; exit 1; }
lib=$(dirname $0)/lib/$(basename $0).shlib; [ -f ${lib} ] && . ${lib}

#
# JBoss Standalone node overlay
#
# Sends to stdout VAR=VALUE lines representing variables to be set up as global variables by the invoking (dependents)
# overlays. The output can be converted automatically to exported environment variables by the
# overlays.export-variables() function
#

# JBOSS_DISTRIBUTION - can be 'wildfly', 'eap', 'jdg'
JBOSS_DISTRIBUTION=""

# JBOSS_MODE - can be 'standalone' or 'domain'

#
# dependencies
#

$(dirname $0)/java $@

#
# overlay
#

[ -z "${SUBORDINATE_HOST_CONTROLLER}" -a -z "${DOMAIN_CONTROLLER}" ] && JBOSS_MODE="standalone" || JBOSS_MODE="domain"

process-overlay-arguments $@
overlay-preconditions

# figures out and sets JBOSS_HOME, JBOSS_DISTRIBUTION
install-binaries

update-user-environment-for-jboss root ${JBOSS_MODE} ${JBOSS_DISTRIBUTION}
update-user-environment-for-jboss ec2-user ${JBOSS_MODE} ${JBOSS_DISTRIBUTION}
add-a-management-user admin admin123
configure-public-interface $(get-primary-ip)

if [ ${JBOSS_MODE} = "standalone" ]; then
    profile=$(extract-from-overlay-args "profile" ${args}) # it's OK if it is empty
    configure-jboss-to-start-at-boot "standalone" ${JBOSS_DISTRIBUTION} ${profile}
    archive-irrelevant-standalone-files ${profile}
fi

#
# we look for memory here (and not only when we run jboss-configuration) because the instance may not
# even start if the memory is set too high
#
max_memory=$(extract-from-overlay-args "max-memory" ${args})
[ -n "${max_memory}" ] && configure-heap-in-conf-file ${max_memory}

#
# export environment variables to be used by dependents
#
export-environment-variables JBOSS_HOME JBOSS_DISTRIBUTION JBOSS_MODE

exit 0






