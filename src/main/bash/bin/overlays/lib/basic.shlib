#!/bin/bash

#
# return 0 if the identity is set up by the function, 1 if the identity was already configured and exits on failure
#
function setup-nfs-server-identity()
{
    debug-arguments $@

    local nfs_server_ip=$1
    local etc_hosts=$2
    [ "${nfs_server_ip}" = "" ] && fail "${FUNCNAME[0]}: 'name' not set"
    [ "${etc_hosts}" = "" ] && etc_hosts=/etc/hosts

    local modified=false

    # ssh into the NFS server and get the hostname
    local nfs_server_hostname
    nfs_server_hostname=$(execute-remotely ${nfs_server_ip} "hostname") || fail "failed to execute remotely"

    debug "nfs_server_hostname: ${nfs_server_hostname}"

    # update /etc/hosts with the NFS server name/IP address
    update-etc-hosts ${nfs_server_hostname} ${nfs_server_ip} ${etc_hosts} && modified=true

    ${modified} && return 0 || return 1
}

#
# Install authorized keys for external users. If gets the keys from the environment's "authorized-keys" directory and
# installs them into ec2-user's authorized_keys file
#
# This step requires NFS (unless it's done locally on the NFS server)
#
function install-authorized-keys()
{
    debug-arguments $@

    local env_authorized_keys_dir=$1
    [ "${env_authorized_keys_dir}" = "" ] && env_authorized_keys_dir=/nfs/environment/authorized-keys
    [ -d ${env_authorized_keys_dir} ] || fail "${env_authorized_keys_dir} does not exist or is not accessible"

    local key_name
    for i in $(ls ${env_authorized_keys_dir}); do
        key_name=$(install-authorized-key ${env_authorized_keys_dir}/${i} ec2-user) && \
            info "installed ${key_name} key into ec2-user's authorized_keys file"  || \
            info "${key_name} key already in ec2-user's authorized_keys"
    done
}

