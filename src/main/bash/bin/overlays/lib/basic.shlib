#!/bin/bash

# return 0 if the overlay was applied successfully and there is no need to apply it, 1 otherwise
function is-overlay-applied()
{
    debug "checking whether the hostname is correctly set ..."

    [ "$(hostname)" = "${name}" ] && \
        { debug "hostname is correctly set to $(hostname)"; } || \
        { debug "hostname is not correctly set"; return 1; }

    debug "checking whether the NFS client is correctly set ..."

    [ -d /nfs/archive ] && \
        { debug "NSF client is correctly set"; } || \
        { debug "NSF client is not correctly set"; return 1; }

    local user
    for user in root ec2-user; do
        grep -q "^alias h=" $(get-home ${user})/.bashrc || return 1
        grep -q "^alias r=" $(get-home ${user})/.bashrc || return 1
    done
}

function setup-user-environment()
{
    debug-arguments $@

    user=$1
    [ "${user}" = "" ] && fail "${FUNCNAME[0]}: 'user' not provided"

    local cursor=">"
    [ "${user}" = "root" ] && cursor="#"

    local PS1_content="export PS1=\"${user}@$(hostname)${cursor} \""

    local bashrc_file="$(get-home ${user})/.bashrc"

    if ! grep -q "${PS1_content}" ${bashrc_file}; then
        echo "" >> ${bashrc_file}
        echo "${PS1_content}" >> ${bashrc_file}
        info "cursor configured in ${bashrc_file}"
    else
        debug "cursor already configured in ~${user}/.bashrc"
    fi

    local alias="alias h='history'"

    if ! grep -q "${alias}" ${bashrc_file}; then
        echo "" >> ${bashrc_file}
        echo "${alias}" >> ${bashrc_file}
        info "${alias} configured in ${bashrc_file}"
    else
        debug "${alias} already configured in ~${user}/.bashrc"
    fi

    alias="alias r='sudo su -'"

    if ! grep -q "${alias}" ${bashrc_file}; then
        echo "" >> ${bashrc_file}
        echo "${alias}" >> ${bashrc_file}
        info "${alias} configured in ${bashrc_file}"
    else
        debug "${alias} already configured in ~${user}/.bashrc"
    fi

}

#
# return 0 if the identity is set up by the fucntion, 1 if the identity was already configured and exits on failure
#
function setup-nfs-server-identity()
{
    debug-arguments $@

    local nfs_server_ip=$1
    local etc_hosts=$2
    [ "${nfs_server_ip}" = "" ] && fail "${FUNCNAME[0]}: 'name' not set"
    [ "${etc_hosts}" = "" ] && etc_hosts=/etc/hosts

    local modified=false

    # ssh into the NFS server and get the hostname
    local environment_identity=$(dirname $0)/../../etc/environment-identity
    [ -f ${environment_identity} ] || fail "environment identity file ${environment_identity} not found or not readable"
    nfs_server_hostname=$(ssh -i ${environment_identity} ec2-user@${nfs_server_ip} "hostname") || fail "failed to ssh into ec2-user@${nfs_server_ip}"
    debug "nfs_server_hostname: ${nfs_server_hostname}"

    # update /etc/hosts with the NFS server name/IP address
    update-etc-hosts ${nfs_server_hostname} ${nfs_server_ip} ${etc_hosts} && modified=true

    ${modified} && return 0 || return 1
}

#
# Install authorized keys for external users. If gets the keys from the environment's "authorized-keys" directory and
# installs them into ec2-user's authorized_keys file
#
# This step requires NFS
#
function install-authorized-keys()
{
    debug-arguments $@

    local env_authorized_keys_dir=$1
    [ "${env_authorized_keys_dir}" = "" ] && env_authorized_keys_dir=/nfs/environment/authorized-keys
    [ -d ${env_authorized_keys_dir} ] || fail "${env_authorized_keys_dir} does not exist or is not accessible"

    local key_name
    for i in $(ls ${env_authorized_keys_dir}); do
        key_name=$(install-authorized-key ${env_authorized_keys_dir}/${i} ec2-user) && \
            info "installed ${key_name} key into ec2-user's authorized_keys file"  || \
            debug "${key_name} key is in ec2-user's authorized_keys already"
    done
}