#!/bin/bash

[ -f $(dirname $0)/../lib/em.shlib ] && . $(dirname $0)/../lib/em.shlib || { echo "$(dirname $0)/../lib/em.shlib not found" 1>&2; exit 1; }

function main
{
    local id
    local archive_dir=/data/archive
    local debug_arg
    local private_ip
    local dry_run_arg
    local java_archive_file
    local java_arg
    local amq_archive_file
    local amq_arg

    while [ "$1" != "" ]; do
        if [ "$1" = "--debug" ]; then
            debug_arg=$1
            debug_off=false
        elif [ "$1" = "--dry-run" ]; then
            dry_run_arg=$1
        elif [ "$1" = "--private-ip" ]; then
            shift
            private_ip=$1
        elif [ "$1" = "--java" ]; then
            shift
            java_archive_file=$1
            java_arg="--java ${java_archive_file}"
        elif [ "$1" = "--amq" ]; then
            shift
            amq_archive_file=$1
            amq_arg="--amq ${amq_archive_file}"
        elif [ "${id}" = "" ]; then
            id=$1
        fi
        shift
    done

    #
    # verify pre-conditions, fail early, these coditions will be alos checked again on the remote host
    #

#    local target_ip
#    target_ip=$(id-to-ip ${id}) || exit 1
    [ "${private_ip}" = "" ] && { echo "the private IP not specified, use --private-ip" 1>&2; exit 1; }

    [ "${java_archive_file}" = "" ] && { echo "java archive file not specified. Use --java to indicate a java archive file in the archive directory ${archive_dir}" 1>&2; exit 1; }
    [ -f ${archive_dir}/${java_archive_file} ] || { echo "java archive file ${archive_dir}/${java_archive_file} does not exist" 1>&2; exit 1; }

    [ "${amq_archive_file}" != "" -a ! -f ${archive_dir}/${amq_archive_file} ] && { echo "A-MQ archive file ${archive_dir}/${amq_archive_file} does not exist" 1>&2; exit 1; }

    # copy the installation key in a temporary location and give it the right ownership and persmissions

    local temp_installation_key=/tmp/.tmpk

    cp $(dirname $0)/../../resources/installation_access.pem ${temp_installation_key} || \
        { echo "failed to copy installation key into /tmp" 1>&2; exit 1; }

    sudo chown ec2-user:ec2-user ${temp_installation_key} || \
        { echo "failed to chown ec2-user:ec2-user installation key" 1>&2; exit 1; }

    chmod go-rwx ${temp_installation_key} \
        || { echo "failed to chmod go-rwx installation key" 1>&2; exit 1; }


    local burn_in_dir=/tmp/.burn-in

    # create the burn-in directory
    ssh -q -t -i ${temp_installation_key} ec2-user@${private_ip} "[ ! -d ${burn_in_dir} ] && mkdir ${burn_in_dir}"

    # copy all libraries on the host we're going to burn in
    scp -q -i ${temp_installation_key} $(dirname $0)/../lib/* ec2-user@${private_ip}:${burn_in_dir}

    # copy the driving script
    scp -q -i ${temp_installation_key} $(dirname $0)/../remote-scripts/* ec2-user@${private_ip}:${burn_in_dir}

    # copy the environment private key
    scp -q -i ${temp_installation_key} ~ec2-user/.ssh/id_rsa ec2-user@${private_ip}:${burn_in_dir}/environment_key_1

    # copy the 'ovidiu_default' public key
    scp -q -i ${temp_installation_key} $(dirname $0)/../../resources/ovidiu_default.pub ec2-user@${private_ip}:${burn_in_dir}

    # copy the environment manager's /etc/hosts
    scp -q -i ${temp_installation_key} /etc/hosts ec2-user@${private_ip}:${burn_in_dir}

    # run the driving script
    ssh -q -t -i ${temp_installation_key} ec2-user@${private_ip} \
        "chmod u+x ${burn_in_dir}/local-burn; sudo ${burn_in_dir}/local-burn ${debug_arg} ${dry_run_arg} ${java_arg} ${amq_arg} ${id}"

    # remove the burn-in directory
    ssh -q -t -i ${temp_installation_key} ec2-user@${private_ip} "rm -rf ${burn_in_dir}"

    # delete the isntallation key
    rm ${temp_installation_key} || { echo "failed to remove installation key" 1>&2; exit 1; }

    #
    # at this point, we know the burn in is a success, so register (or update the existing registration)
    # in the environment managers's /etc/hosts
    #

    update-etc-hosts ${id} ${private_ip}
}

main $@