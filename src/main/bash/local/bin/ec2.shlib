#!/bin/bash


#
# global variables
#
debug=false
debug_arg=""
dry_run=false
dry_run_arg=""
args=""

#
# processes common options (like --debug, --dry-run or --help/-h. Sets global variables for debug, debug_arg,
# dry_run and dry_run_arg and acts on "--help" by executing display_help. The remaning arguments are set as
# a space separated ${args} global variable
#
# Usage:
#
#        process_common_options $@
#
function process_common_options()
{
    local help=false

    while [ "$1" != "" ]; do
        if [ "$1" = "--help" -o "$1" = "-h" ]; then
            help=true;
        elif [ "$1" = "--debug" ]; then
            debug=true
            debug_arg="--debug"
        elif [ "$1" = "--dry-run" ]; then
            dry_run=true
            dry_run_arg="--dry-run"
        else
            [ "${args}" = "" ] && args=$1 || args="${args} $1"
        fi
        shift
    done

    # function display_help must be defined before process_common_options is called.

    ${help} && { display_help; exit 0; }
}

function debug()
{
    ${debug} && echo "$@" 1>&2;
}

function info()
{
    echo "$@" 1>&2;
}

# sends the arguments at stderr and exits with 1
function fail()
{
    echo "$@" 1>&2;
    exit 1
}

########################################################################################################################
#  /etc/hosts functions
########################################################################################################################

#
# Update the /etc/hosts with the Amazon EC2 name/public IP
#
function update_etc_hosts()
{
    local name_colon_public_ip_space_separated_list=$1 # example "f01:1.1.1.1 f02:2.2.2.2"
    local updated=false

    for i in ${name_colon_public_ip_space_separated_list}; do
        local name=${i%:*}
        local public_ip=${i#*:}

        debug "name: ${name}, public_ip: ${public_ip}"

        if grep -q ${name} /etc/hosts; then
            #
            # the name is already in /etc/hosts, need to update it
            #
            cat /etc/hosts | sed -e 's/^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]* *'${name}'$/'${public_ip}" "${name}'/g' > /tmp/.sed.tmp || fail "failed to sed /etc/hosts"
            if diff /etc/hosts /tmp/.sed.tmp > /dev/null; then
                # this host does not need updating, continue
                continue;
            fi
            mv /tmp/.sed.tmp /etc/hosts && info "${name} resolved to ${public_ip} in /etc/hosts" || fail "failed to update /etc/hosts"
            updated=true
        else
            #
            # the name is not in /etc/hosts, add it to the bottom of the file
            #
            echo "${public_ip} ${name}" >> /etc/hosts && info "${name} resolved to ${public_ip} in /etc/hosts" || fail "failed to update /etc/hosts"
            updated=true
        fi
    done

    ${updated} || { debug "/etc/hosts has not been changed, it is probably up-to-date"; }

}

#
# returns the IP for the given host name from /etc/hosts at stdout or the empty string if the host name not found
#
function ip_from_etc_hosts
{
    local name=$1

    [ "${name}" = "" ] && fail "'name' not specified"

    local ip

    ip=$(cat /etc/hosts | grep "^.* ${name}$") || fail "failed to look up IP address for ${name} in /etc/hosts"
    ip=${ip% *}
    echo ${ip}
}

