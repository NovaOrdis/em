#!/bin/bash


#
# global variables
#
debug=false
debug_arg=""
dry_run=false
dry_run_arg=""
args=""

#
# processes common options (like --debug, --dry-run or --help/-h. Sets global variables for debug, debug_arg,
# dry_run and dry_run_arg and acts on "--help" by executing display_help. The remaning arguments are set as
# a space separated ${args} global variable
#
function process_common_options()
{
    local help=false

    while [ "$1" != "" ]; do
        if [ "$1" = "--help" -o "$1" = "-h" ]; then
            help=true;
        elif [ "$1" = "--debug" ]; then
            debug=true
            debug_arg="--debug"
        elif [ "$1" = "--dry-run" ]; then
            dry_run=true
            dry_run_arg="--dry-run"
        else
            [ "${args}" = "" ] && args=$1 || args="${args} $1"
        fi
        shift
    done

    # function display_help must be defined before process_common_options is called.

    ${help} && { display_help; exit 0; }
}

function debug()
{
    ${debug} && echo "$@" 1>&2;
}

function info()
{
    echo "$@" 1>&2;
}

#
# Update the /etc/hosts with the Amazon EC2 name/public IP
#
function update_etc_hosts()
{
    local name_colon_public_ip_space_separated_list=$1 # example "f01:1.1.1.1 f02:2.2.2.2"
    local updated=false

    for i in ${name_colon_public_ip_space_separated_list}; do
        local ec2_name=${i%:*}
        local ec2_public_ip=${i#*:}

        ${debug} && echo "ec2_name: ${ec2_name}" 1>&2;
        ${debug} && echo "ec2_public_ip: ${ec2_public_ip}" 1>&2;

        # if the name is already in /etc/hosts, update it, otherwise add it at the bottom of the file
        if grep -q ${ec2_name} /etc/hosts; then
            cat /etc/hosts | sed -e 's/^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]* *'${ec2_name}'$/'${ec2_public_ip}" "${ec2_name}'/g' > /tmp/.sed.tmp || { echo "failed to sed"; exit 1; }
            if diff /etc/hosts /tmp/.sed.tmp > /dev/null; then
                # this host does not need updating, continue
                continue;
            fi
            mv /tmp/.sed.tmp /etc/hosts && echo "${ec2_name} resolved to ${ec2_public_ip} in /etc/hosts" || { echo "failed to update /etc/hosts" 1>&2; exit 1; }
            updated=true
        else
            echo "${ec2_public_ip} ${ec2_name}" >> /etc/hosts || { echo "failed to edit /etc/hosts" 1>&2; exit 1; }
            updated=true
        fi
    done

    ${updated} || { echo "/etc/hosts has not been changed, it is probably up-to-date"; }

}
