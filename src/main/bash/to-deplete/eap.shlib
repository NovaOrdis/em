#!/bin/bash
#
# JBoss Installation
#
# Global variables
#
#       debug_off=true|false
#
#       dry_run=true|false
#
#

xms=512m
xmx=512m
maxPermSize=128m
#jboss_user=ec2-user
jboss_group=ec2-user

burn_in_dir=/tmp/.burn-in

function install-jboss
{
    id=$1
    jboss_archive_file=$2
    debug "install-jboss(id=${id}, jboss_archive_file=${jboss_archive_file})"
    [ "${id}" = "" ] && { echo "'id' not specified" 1>&2; exit 1; }
    [ "${jboss_archive_file}" = "" ] && { echo "'jboss_archive_file' not specified" 1>&2; exit 1; }

    local archive_dir=/nfs/archive
    [ -d ${archive_dir} ] || { echo "${archive_dir} not a directory, was the NFS client activated?" 1>&2; exit 1; }

    local jboss_archive_path=${archive_dir}/${jboss_archive_file}
    [ -f ${jboss_archive_path} ] || { echo "JBoss archive ${jboss_archive_path} does not exist" 1>&2; exit 1; }

    local link_name=jboss

    #
    # figure out if the JBoss archive was expanded in place already
    #

    local jboss_top_dir_name
    jboss_top_dir_name=$(get-top-level-dir-in-zip-archive ${jboss_archive_path}) || exit 1

    local jboss_dir
    jboss_dir=/opt/${jboss_top_dir_name}

    if [ ! -d ${jboss_dir} ]; then
        # the directory is not there, unzip
        (cd /opt; unzip -q ${jboss_archive_path}) && echo "extracted JBoss into /opt" || { echo "failed to extract JBoss" 1>&2; exit 1; }

        # the top directory should have been created
        [ -d ${jboss_dir} ] || { echo "top level JBoss directory ${jboss_dir} was not created as expected" 1>&2; exit 1; }
    fi

    if [ ! -h /opt/${link_name} ]; then
        (cd /opt; ln -s ${jboss_dir} ${link_name}) && echo "linked ${jboss_dir} as /opt/${link_name}" || { echo "failed to link ${jboss_dir} as /opt/${link_name}" 1>&2; exit 1; }
    fi

    # update root's and ec2-user's .bashrc

    local users="ec2-user root"
    for user in ${users}; do
        local bashrc_file=$(get-home-dir ${user})/.bashrc
        if ! grep -q "export JBOSS_HOME=/opt/${link_name}" ${bashrc_file}; then
            echo "" >> ${bashrc_file}
            echo "export JBOSS_HOME=/opt/${link_name}" >> ${bashrc_file} && echo "updated ${bashrc_file} with JBOSS_HOME"
        fi
        if ! grep -q "alias jb=" ${bashrc_file}; then
            echo "alias jb='cd \${JBOSS_HOME}'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jb' alias"
        fi
        if ! grep -q "alias jbb=" ${bashrc_file}; then
            echo "alias jbb='cd \${JBOSS_HOME}/bin'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jbb' alias"
        fi
        if ! grep -q "alias jbp=" ${bashrc_file}; then
            echo "alias jbp='cd \${JBOSS_HOME}/standalone'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jbp' alias"
        fi
        if ! grep -q "alias jbl=" ${bashrc_file}; then
            echo "alias jbl='cd \${JBOSS_HOME}/standalone/log'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jbl' alias"
        fi
        if ! grep -q "alias jbc=" ${bashrc_file}; then
            echo "alias jbc='cd \${JBOSS_HOME}/standalone/configuration'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jbc' alias"
        fi
        if ! grep -q "alias jbd=" ${bashrc_file}; then
            echo "alias jbd='cd \${JBOSS_HOME}/standalone/deployments'" >> ${bashrc_file} && echo "updated ${bashrc_file} by adding the 'jbd' alias"
        fi
    done

    #
    # memory
    #

    [ "${xms}" = "" ] && { echo "'xms' not defined" 1>&2; exit 1; }
    [ "${xmx}" = "" ] && { echo "'xmx' not defined" 1>&2; exit 1; }
    [ "${maxPermSize}" = "" ] && { echo "'maxPermSize' not defined" 1>&2; exit 1; }

    local f=${jboss_dir}/bin/standalone.conf

    if ! grep -q "^ *JAVA_OPTS=\".*\-Xms${xms}.*" ${f}; then
        cat ${f} | sed -e 's/^\( *JAVA_OPTS=\".*\)\(-Xms\).*\( -Xmx.*$\)/\1\2'${xms}'\3/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
        mv ${burn_in_dir}/sed.tmp ${f} && \
            echo "set -Xms to ${xms} in ${f}" || { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }
    fi

    if ! grep -q "^ *JAVA_OPTS=\".*\-Xmx${xmx}.*" ${f}; then
        cat ${f} | sed -e 's/^\( *JAVA_OPTS=\".*\)\(-Xmx\).*\( -XX:MaxPermSize.*$\)/\1\2'${xmx}'\3/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
        mv ${burn_in_dir}/sed.tmp ${f} && \
            echo "set -Xmx to ${xmx} in ${f}" || { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }
    fi

    if ! grep -q "^ *JAVA_OPTS=\".*\-XX:MaxPermSize=${maxPermSize}.*" ${f}; then
        cat ${f} | sed -e 's/^\( *JAVA_OPTS=\".*\)\(-XX:MaxPermSize=\).*\( -Djava.net.preferIPv4Stack.*$\)/\1\2'${maxPermSize}'\3/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
        mv ${burn_in_dir}/sed.tmp ${f} && \
            echo "set -XX:MaxPermSize to ${maxPermSize} in ${f}" || { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }
    fi

    #
    # jboss.bind.address
    #

    local jboss_bind_address
    jboss_bind_address=$(get-ip-address) || exit 1

    if ! grep -q "^JAVA_OPTS=\"\${JAVA_OPTS} -Djboss.bind.address=" ${f}; then
        echo "JAVA_OPTS=\"\${JAVA_OPTS} -Djboss.bind.address=${jboss_bind_address}\"" >> ${f} && \
            echo "set up jboss.bind.address as ${jboss_bind_address} in ${f}" || \
            { echo "" 1>&2; exit 1; }
    fi

    #
    # jboss.node.name
    #

    if ! grep -q "^JAVA_OPTS=\"\${JAVA_OPTS} -Djboss.node.name=" ${f}; then
        echo "JAVA_OPTS=\"\${JAVA_OPTS} -Djboss.node.name=${id}\"" >> ${f} && \
            echo "set up jboss.node.name as '${id}' in ${f}" || \
            { echo "" 1>&2; exit 1; }
    fi

    #
    # security
    #

    local f
    f=/opt/${link_name}/standalone/configuration/mgmt-users.properties

    if ! grep -q "^admin=" ${f}; then
        (cd /opt/${link_name}/bin; ./add-user.sh -u admin -p admin123@) || { echo "failed to add the admin user" 1>&2; exit 1; }
    fi

    #
    # expose the HTTP console publicly
    #

    f=${jboss_dir}/standalone/configuration/standalone.xml

    if grep -q "^ *<socket-binding name=\"management-http\" interface=\"management\"" ${f}; then
        cat ${f} | sed -e 's/^\( *<socket-binding name=\"management-http\" interface=\"\)management\(\".*$\)/\1public\2/' > ${burn_in_dir}/sed.tmp || \
            { echo "failed to sed ${f}" 1>2; exit 1; }
        mv ${burn_in_dir}/sed.tmp ${f} && \
            echo "exposed the HTTP console publicly in in ${f}" || { echo "failed to restore ${f} from ${burn_in_dir}/sed.tmp" 1>2; exit 1; }
    fi


#        <socket-binding name="management-http" interface="management" port="${jboss.management.http.port:9990}"/>

    #
    # update permissions
    #

    local actual_group
    local d=/opt/${link_name}/standalone

    actual_group=$(get-group ${d}) || exit 1

    if [ "${actual_group}" != "${jboss_group}" ]; then
        chgrp -R ${jboss_group} ${d} && echo "chgrp -R ${jboss_group} ${d}"
        chmod -R g+rw ${d}  && echo "chmod -R g+rw ${d}"
    fi

}

# return the absolute path of the sole A-MQ directory, or empty string if no A-MQ directory
# is found, or fail if more than one A-MQ directory is found
function get-jboss-dir
{
    local parent=$1

    [ "${parent}" = "" ] && { echo "'parent' directory not specified" 1>&2; exit 1; }
    [ -d ${parent} ] || { echo "'parent' ${parent} is not a directory" 1>&2; exit 1; }

    echo "get-jboss-dir() NOT YET IMPLEMENTED" 1>&2;
    exit 1

    local amq_dir

    for i in $(ls -d ${parent}/*); do
        if [ -d ${i} ]; then
            local name
            name=$(basename ${i})
            name=${name:0:10}
            if [ "${name}" = "jboss-a-mq" ]; then
                [ "${amq_dir}" != "" ] && { echo "more than one A-MQ directory exist in ${parent}: ${amq_dir}, ${i}" 1>&2; exit 1; }
                amq_dir=${i}
            fi
        fi
    done

    echo ${amq_dir}
}


