#!/bin/bash


# returns the group owner of the directory/file or fails with a return code 1
function get-group
{
    local target=$1
    local s

    if [ -f ${target} ]; then
        s=$(ls -l ${target})
    elif [ -d ${target} ]; then
        s=$(ls -ld ${target})
    else
        echo "failed to figure out group for ${target}" 1>&2;
        return 1
    fi

    echo ${s} | awk '{print $4}'
}

#
# This is the function that links the id to ec2-host in /nfs/bin, providing for the shortcut to
# ssh into the host
#
function link-to-ec2-host
{
    local id=$1
    local bin_dir=$2
    [ "${id}" = "" ] && { echo "'id' not specified" 1>&2; exit 1; }
    [ "${bin_dir}" = "" ] && { echo "'bin_dir' not provided" 1>&2; exit 1; }
    [ ! -d ${bin_dir} ] && { echo "'bin_dir' ${bin_dir} not a directory" 1>&2; exit 1; }
    [ -x ${bin_dir}/ec2-host ] || { echo "${bin_dir}/ec2-host does not exist or is not executable. Have you configured and started the NFS client?" 1>&2; exit 1; }

    if [ ! -h ${bin_dir}/${id} ]; then
        (cd ${bin_dir}; ln -s ./ec2-host ${id}) && echo "linked ${id} to ${bin_dir}/ec2-host"
    fi
}

#######################################################################################
# User Environment Configuration
#######################################################################################


function setup-environment-private-key
{
    local user_name=$1
    local environment_private_key_file=$2
    debug "setup-environment-private-key(user_name=$1, environment_private_key_file=$2)"
    [ "${user_name}" = "" ] && { echo "'user_name' not specified" 1>&2; exit 1; }
    [ "${environment_private_key_file}" = "" ] && { echo "'environment_private_key_file' not specified" 1>&2; exit 1; }
    [ -f "${environment_private_key_file}" ] || { echo "'environment_private_key_file' ${environment_private_key_file} does not exist" 1>&2; exit 1; }

    local ssh_dir=$(get-home-dir ${user_name})/.ssh

    if [ ! -d ${ssh_dir} ]; then
        mkdir ${ssh_dir} || exit 1
        chown ${user_name}:${user_name} ${ssh_dir} || exit 1
        echo "created ${ssh_dir}"
    fi

    if [ ! -f ${ssh_dir}/id_rsa ]; then
        cat ${environment_private_key_file} >> ${ssh_dir}/id_rsa || { echo "failed to copy environment key file into ${ssh_dir}/id_rsa" 1>&2; exit 1; }
        chown ${user_name}:${user_name} ${ssh_dir}/id_rsa || exit 1
        chmod go-rwx ${ssh_dir}/id_rsa || exit 1
        echo "created ${ssh_dir}/id_rsa"
    fi
}

function setup-environment-public-key
{
    local user_name=$1
    local environment_private_key_file=$2
    debug "setup-environment-private-key(user_name=$1, environment_private_key_file=$2)"
    [ "${user_name}" = "" ] && { echo "'user_name' not specified" 1>&2; exit 1; }
    [ "${environment_private_key_file}" = "" ] && { echo "'environment_private_key_file' not specified" 1>&2; exit 1; }
    [ -f "${environment_private_key_file}" ] || { echo "'environment_private_key_file' ${environment_private_key_file} does not exist" 1>&2; exit 1; }

    local ssh_dir=$(get-home-dir ${user_name})/.ssh

    if [ ! -d ${ssh_dir} ]; then
        mkdir ${ssh_dir} || exit 1
        chown ${user_name}:${user_name} ${ssh_dir} || exit 1
        echo "created ${ssh_dir}"
    fi

    local key_label="environment-access-key"

    if ! grep -q "${key_label}" ${ssh_dir}/authorized_keys; then
        local public_key
        public_key=$(ssh-keygen -y -f ${environment_private_key_file}) || \
            { echo "failed to generate public key from ${environment_private_key_file}" 1>&2; exit 1; }
        public_key="${public_key} ${key_label}"
        echo ${public_key} >> ${ssh_dir}/authorized_keys || { echo "failed to copy environment key file into ${ssh_dir}/id_rsa" 1>&2; exit 1; }
        chown ${user_name}:${user_name} ${ssh_dir}/id_rsa || exit 1
        echo "updated ${ssh_dir}/authorized_keys, added '${key_label}'"
    fi
}

#######################################################################################
# Storage
#######################################################################################

function mount-main-storage
{
    local mount_point=$1
    local partition=$2

    [ "${mount_point}" = "" ] && { echo "'mount_point' not specified" 1>&2; exit 1; }

    #
    # determine wheteher fstab is already set up
    #

    if ! grep -q "^.* *${mount_point} *ext4.*$" /etc/fstab; then

        #
        # fstab not configured
        #

        unmounted_device_count=$(lsblk -l | grep "part *$" | wc -l) || exit 1

        # the only case we're handling is when we only have an unmounted device or
        # --partition is specified; anything else is an error

        local device_name

        if [ "${unmounted_device_count}" = "0" ]; then

            # all devices are mounted, but we still need to make sure that the ${mount_point} subdir exist
            device_name=$(lsblk -l | grep "${mount_point}") || exit 1
            device_name="/dev/${device_name%% *}"

        elif [ "${partition}" != "" ]; then

            device_name="/dev/${partition}"

        elif [ "${unmounted_device_count}" = "1" ]; then

            device_name=$(lsblk -l | grep "part *$")
            device_name=${device_name%% *}
            device_name="/dev/${device_name}"

        else
            echo "unmounted_device_count: '${unmounted_device_count}'";
            echo ""
            echo "unmounted devices:"
            echo ""
            lsblk -l | grep "part *$"
            echo ""
            echo "specify the one you want to use with '--partition' and try again"
            echo ""
            exit 1;
        fi

        device_type=$(file -s ${device_name})
        device_type=${device_type#*: }

        echo "device_name: ${device_name}, ${device_type}: ${device_type}"
        return 0

        #
        # determine whether we need to create a file system
        #

        if [ "${device_type}" == "data" ]; then
            # the device does not have a filesystem on it, it does need formatting
            mkfs -t ext4 ${device_name} && echo "created ext4 filesystem on ${device_name}" || \
                { echo "failed to create filesystem on ${device_name}"; exit 1; }
        fi

        # update /etc/fstab
        echo "${device_name}       /data   ext4    defaults,nofail        0       2" >> /etc/fstab && \
        echo "declared ${device_name} in /etc/fstab"

    else

        #
        # fstab is configured
        #

        if [ ! -d /data ]; then
            mkdir /data && echo "created mountpoint /data"
            chgrp ec2-user /data
            chmod g+w /data
        fi

        mount -a

        #
        # make sure the filesystem is mounted
        #

        count=$(mount | grep "on /data " | wc -l)

        if [ "${count}" != "1" ]; then
            echo ""
            echo "/data does not seem to be mounted correctly, count ${count}:"
            echo ""
            mount
            exit 1
        fi
    fi

    return 0

    if [ ! -d /data/archive ]; then
        mkdir /data/archive && echo "created /data/archive"
        chgrp ec2-user /data/archive
        chmod g+w /data/archive
    fi

    if [ ! -d /data/bin ]; then
        mkdir /data/bin && echo "created /data/bin"
        chgrp ec2-user /data/bin
        chmod g+w /data/bin
    fi
}


#######################################################################################
# NFS Installation
#######################################################################################

function setup-nfs-server
{
    install-package rpcbind
    install-package nfs-utils

    #
    # share /data in /etc/exports
    #

    if ! grep -q "^/data " /etc/exports; then
        echo "/data 172.31.16.0/20(rw,sync,no_root_squash,no_subtree_check)" >> /etc/exports && echo "declared /data in /etc/exports"
    fi

    if ! systemctl -q is-enabled nfs-server; then
        systemctl enable nfs-server
        echo "nfs server enabled for boot"
    fi

    if ! systemctl -q is-active nfs-server; then
        service nfs-server start
        echo "nfs server started"
    fi

    exportfs -a || { echo "failed to exportfs" 1>&2; exit 1; }
}

#######################################################################################
# Java
#######################################################################################

# return the absolute path of the sole Java directory, or empty string if no java directory
# is found, or fail if more than one java directory is found
function get_java_dir
{
    local parent=$1

    [ "${parent}" = "" ] && { echo "'parent' directory not specified" 1>&2; exit 1; }
    [ -d ${parent} ] || { echo "'parent' ${parent} is not a directory" 1>&2; exit 1; }

    local java_dir

    for i in $(ls -d ${parent}/*); do
        if [ -d ${i} ]; then
            local name
            name=$(basename ${i})
            name=${name:0:3}
            if [ "${name}" = "jdk" ]; then
                [ "${java_dir}" != "" ] && { echo "more than one java directory exist in ${parent}: ${java_dir}, ${i}" 1>&2; exit 1; }
                java_dir=${i}
            fi
        fi
    done

    echo ${java_dir}
}


